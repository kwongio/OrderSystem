server:
  tomcat:
    mbeanregistry:
      enabled: true
    threads:
      max: 200
      min-spare: 10
      max-queue-capacity: 2147483647
    max-connections: 8192


spring:
  cache:
    type: redis

  datasource:
    master:
      driver-class-name: com.mysql.cj.jdbc.Driver
      jdbc-url: jdbc:mysql://localhost:3306/OrderSystem?serverTimezone=UTC&characterEncoding=UTF-8
      username: root
      password: 1234
      maximum-pool-size: 50
      minimum-idle: 10
    slave:
      driver-class-name: com.mysql.cj.jdbc.Driver
      jdbc-url: jdbc:mysql://localhost:3307/OrderSystem?serverTimezone=UTC&characterEncoding=UTF-8
      username: root
      password: 1234
      maximum-pool-size: 50
      minimum-idle: 10


  jpa:
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        default_batch_fetch_size: 1000
        use_sql_comments: true
        format_sql: true
    #        show_sql: true 이거 키면 SQL 두번 나옴
    open-in-view: false
    defer-datasource-initialization: false

  data:
    web:
      pageable:
        default-page-size: 20 # 페이지 크기를 20으로 설정
        one-indexed-parameters: true # 페이지 번호를 1부터 시작하도록 설정
    redis:
      password: redispassword
      sentinel:
        master: mymaster
        nodes:
          - host.docker.internal:26379  # 로컬 머신에서 Redis Sentinel에 접근
          - host.docker.internal:26380
          - host.docker.internal:26381
      lettuce:
        shutdown-timeout: 200ms
#  sql:
#    init:
#      mode: always

logging:
  level:
    org.hibernate.SQL: debug
    org.hibernate.type: trace
    org.hibernate.type.descriptor.sql: trace

springdoc:
  packages-to-scan: com.gio.ordersystem
  default-consumes-media-type: application/json;charset=UTF-8
  default-produces-media-type: application/json;charset=UTF-8

  api-docs:
    path: /api
  cache:
    disabled: true

  swagger-ui:
    path: /ui # Swagger UI에 접근할 경로 (기본값: /swagger-ui.html)
    operations-sorter: method # API 문서를 HTTP 메서드(GET, POST 등) 순으로 정렬
    display-request-duration: true # 요청의 처리 시간을 UI에서 표시
    persist-authorization: true # 인증 정보를 유지하도록 설정
    deep-linking: true # URL 경로를 통한 API 문서 바로가기 활성화
    doc-expansion: list # 기본 문서 열람 방식: 리스트 형태 (또는 none, full 가능)





# Prometheus와 Grafana를 사용한 Spring Boot 애플리케이션 모니터링 설정
management:
  #  server: 내부망에서만 접근 설정
  #    port:
  endpoints:
    web:
      exposure:
        include: "*" # 모든 Actuator 엔드포인트를 노출
  #        include: prometheus # 모든 Actuator 엔드포인트를 노출
  endpoint:
    prometheus:
      access: unrestricted # Prometheus 메트릭 엔드포인트에 접근 허용 (기본값)
  prometheus:
    metrics:
      export:
        enabled: true # Prometheus 메트릭 수출을 활성화